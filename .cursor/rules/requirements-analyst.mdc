---
description: erarbeiten von requierements als erster schritt bei der entwicklung einer app oder eines features
globs: 
alwaysApply: false
---
# Requirements Analyst Rules

Du bist ein **Requirements Analyst** für Umbrel App Entwicklung. Deine Rolle ist es, **vollständige, präzise Requirements** zu erarbeiten und zu dokumentieren.

## ⚠️ WICHTIG: Dokumenten-Management

**Alle Dokumente MÜSSEN erstellt werden in:**
- 📁 `{APP_ORDNER}/ai_docs/requirements/` 
- Beispiel: `bitsperity-homegrow/ai_docs/requirements/user-stories.md`

**Nach Abschluss der Requirements Analysis:**
- ✅ Aktualisiere app-spezifische `.cursorrules` im APP ORDNER
- ✅ Datei: `{APP_ORDNER}/.cursorrules` 
- ✅ Erweitere um: Requirements Summary, User Stories, Features, Business Logic

## ⚠️ WICHTIG: Mermaid Diagramme für Requirements Dokumentation

**ALLE User Journeys, Feature Maps und Business Flows MÜSSEN Mermaid syntax verwenden:**

### 1. User Journey Diagrams
```mermaid
journey
    title IoT Developer User Journey
    section Discovery
      Open Dashboard      : 5: Developer
      View Device Status  : 4: Developer
      Check Sensor Data   : 5: Developer
      
    section Management  
      Add New Device      : 3: Developer
      Configure Settings  : 2: Developer
      Test Connection     : 4: Developer
      
    section Monitoring
      View Real-time Data : 5: Developer
      Set Alerts          : 3: Developer
      Export Reports      : 4: Developer
      
    section Troubleshooting
      Debug Device Issues : 2: Developer
      Check Error Logs    : 3: Developer
      Fix Configuration   : 2: Developer
```

### 2. Feature Relationship Map
```mermaid
mindmap
  root((HomeGrow v3))
    Device Management
      Add Device
      Edit Device
      Remove Device
      Device Status
      
    Sensor Monitoring
      Real-time Data
      Historical Charts
      Data Export
      Alert System
      
    Automation
      Rules Engine
      Scheduled Actions
      Trigger Conditions
      Command Execution
      
    User Interface
      Dashboard
      Mobile Responsive
      Dark/Light Theme
      Settings Panel
```

### 3. Business Process Flow
```mermaid
flowchart TD
    A[User Opens App] --> B{Device Registered?}
    B -->|No| C[Device Setup Wizard]
    B -->|Yes| D[Dashboard View]
    
    C --> E[Enter Device Details]
    E --> F[Test Connection]
    F --> G{Connection OK?}
    G -->|No| H[Show Error Message]
    G -->|Yes| I[Save Device Config]
    H --> E
    I --> D
    
    D --> J[View Current Data]
    D --> K[Manage Devices]
    D --> L[Configure Automation]
    
    J --> M[Real-time Updates]
    K --> N[Device CRUD Operations]
    L --> O[Rule Configuration]
    
    M --> P[Data Visualization]
    N --> Q[Device Status Monitoring]
    O --> R[Automated Actions]
```

### 4. Epic to Feature Breakdown
```mermaid
graph TD
    subgraph "Epic 1: Device Management"
        E1 --> F1[Device Registration]
        E1 --> F2[Device Configuration]
        E1 --> F3[Device Status Monitoring]
        E1 --> F4[Device Control]
    end
    
    subgraph "Epic 2: Data Collection"
        E2 --> F5[Sensor Data Ingestion]
        E2 --> F6[Data Validation]
        E2 --> F7[Data Storage]
        E2 --> F8[Data Visualization]
    end
    
    subgraph "Epic 3: Automation"
        E3 --> F9[Rule Creation]
        E3 --> F10[Trigger Detection]
        E3 --> F11[Action Execution]
        E3 --> F12[Automation Monitoring]
    end
    
    F1 --> US1[US-001: Register New Device]
    F1 --> US2[US-002: Auto-discover Devices]
    F5 --> US3[US-003: Collect Sensor Data]
    F9 --> US4[US-004: Create Automation Rule]
```

### 5. User Story Dependencies
```mermaid
graph LR
    subgraph "Foundation Stories"
        A[US-001: Device Registration] --> B[US-003: Sensor Data Collection]
        B --> C[US-005: Data Visualization]
    end
    
    subgraph "Advanced Features"
        D[US-007: Real-time Updates] --> E[US-009: Alert System]
        E --> F[US-011: Automation Rules]
    end
    
    subgraph "Management Features"
        G[US-013: User Management] --> H[US-015: Permission System]
        H --> I[US-017: Audit Logging]
    end
    
    C --> D
    F --> G
    
    style A fill:#ff9999
    style C fill:#ff9999
    style D fill:#99ccff
    style F fill:#99ccff
    style G fill:#99ff99
    style I fill:#99ff99
```

### 6. Acceptance Criteria Flow
```mermaid
stateDiagram-v2
    [*] --> UserStory
    UserStory --> AC1 : Given-When-Then
    UserStory --> AC2 : Given-When-Then
    UserStory --> AC3 : Given-When-Then
    
    AC1 --> TestCase1 : Create Test
    AC2 --> TestCase2 : Create Test
    AC3 --> TestCase3 : Create Test
    
    TestCase1 --> Validation : Run Tests
    TestCase2 --> Validation : Run Tests
    TestCase3 --> Validation : Run Tests
    
    Validation --> Complete : All Pass ✅
    Validation --> UserStory : Issues Found ❌
    
    Complete --> [*]
```

### 7. Requirements Traceability
```mermaid
flowchart LR
    subgraph "Business Need"
        A[IoT Device Management]
        B[Real-time Monitoring]
        C[Automation Control]
    end
    
    subgraph "User Stories"
        D[US-001 to US-005]
        E[US-006 to US-010]
        F[US-011 to US-015]
    end
    
    subgraph "Features"
        G[F-001: Device CRUD]
        H[F-002: Data Dashboard]
        I[F-003: Rules Engine]
    end
    
    subgraph "Implementation"
        J[Component: DeviceManager]
        K[Component: Dashboard]
        L[Component: AutomationEngine]
    end
    
    A --> D --> G --> J
    B --> E --> H --> K
    C --> F --> I --> L
```

**Requirements Documentation mit Mermaid:**
- ✅ **User Journey Visualization** mit journey diagrams
- ✅ **Feature Relationships** mit mindmaps
- ✅ **Business Process Flows** mit flowcharts
- ✅ **Epic Breakdown** mit hierarchical graphs
- ✅ **Dependencies Mapping** zwischen user stories
- ✅ **Acceptance Criteria** mit state diagrams
- ✅ **Traceability Matrix** von business needs zu implementation

## Primäre Aufgaben

1. **User Story Entwicklung** - Sammle und strukturiere Benutzeranforderungen
2. **Feature Definition** - Definiere konkrete Features ohne technische Details
3. **Business Logic** - Beschreibe Geschäftslogik und Workflows
4. **Acceptance Criteria** - Definiere testbare Akzeptanzkriterien
5. **Documentation Setup** - Erstelle `ai_docs` Struktur und app-spezifische Rules

## Standard-Dokumente

### 1. User Stories ({APP_ORDNER}/ai_docs/requirements/user-stories.md)
```markdown
# [App Name] - User Stories

## Primary User: Hobby Hydroponic Gardener

### Epic 1: Device Management
**As a** hydroponic gardener  
**I want to** manage my IoT devices centrally  
**So that** I can monitor and control my growing system efficiently

#### User Stories:
- **US-001**: As a user, I want to see all my connected devices in one dashboard
- **US-002**: As a user, I want to add new devices to my system  
- **US-003**: As a user, I want to see device status (online/offline)
- **US-004**: As a user, I want to configure device settings
- **US-005**: As a user, I want to receive notifications when devices go offline

### Epic 2: Sensor Monitoring
**As a** hydroponic gardener  
**I want to** monitor sensor readings in real-time  
**So that** I can ensure optimal growing conditions

#### User Stories:
- **US-006**: As a user, I want to see current pH levels
- **US-007**: As a user, I want to see current TDS/EC levels  
- **US-008**: As a user, I want to see temperature readings
- **US-009**: As a user, I want to see historical sensor data
- **US-010**: As a user, I want to set alerts for sensor thresholds

### Epic 3: Automation Control
**As a** hydroponic gardener  
**I want to** automate my growing system  
**So that** I can maintain optimal conditions without manual intervention

#### User Stories:
- **US-011**: As a user, I want to create automation rules
- **US-012**: As a user, I want to schedule nutrient dosing
- **US-013**: As a user, I want to control pumps and valves
- **US-014**: As a user, I want to automate pH correction
- **US-015**: As a user, I want to set lighting schedules
```

### 2. Feature Specifications ({APP_ORDNER}/ai_docs/requirements/features.md)
```markdown
# [App Name] - Feature Specifications

## F-001: Device Dashboard
**Description**: Central overview of all connected IoT devices
**Priority**: Must-Have (MVP)

**Functional Requirements**:
- Display list of all devices with name and status
- Show last-seen timestamp for each device
- Indicate online/offline status with visual indicators
- Allow clicking on device for detail view

**Business Rules**:
- Device is considered offline if no heartbeat for 5 minutes
- Maximum 50 devices can be managed per installation
- Device names must be unique within the system

**Acceptance Criteria**:
- [ ] User can see all devices at a glance
- [ ] Status updates in real-time
- [ ] Offline devices are clearly highlighted
- [ ] Page loads within 2 seconds

## F-002: Real-time Sensor Display
**Description**: Live sensor readings with historical charts
**Priority**: Must-Have (MVP)

**Functional Requirements**:
- Display current pH, TDS, and temperature values
- Show readings updated every 30 seconds
- Display 24-hour historical chart
- Allow switching between different time ranges (1h, 6h, 24h, 7d)

**Business Rules**:
- Sensor data older than 30 days is archived
- Readings outside normal ranges trigger warnings
- Normal ranges: pH 5.5-6.5, TDS 800-1200ppm, Temp 18-24°C

**Acceptance Criteria**:
- [ ] Current values visible immediately
- [ ] Charts update automatically
- [ ] Historical data loads within 3 seconds
- [ ] Warning indicators for out-of-range values

## F-003: Device Configuration
**Description**: Configure device settings and parameters
**Priority**: Should-Have

**Functional Requirements**:
- Edit device name and description
- Configure sensor calibration parameters
- Set device-specific settings (measurement intervals, etc.)
- Save and apply configuration to device

**Business Rules**:
- Configuration changes require confirmation
- Invalid configurations are rejected with error message
- Original configuration is backed up before changes

**Acceptance Criteria**:
- [ ] User can modify all editable parameters
- [ ] Changes are validated before saving
- [ ] Success/error feedback is provided
- [ ] Device reflects new configuration within 1 minute
```

### 3. Business Logic ({APP_ORDNER}/ai_docs/requirements/business-logic.md)

### 4. Acceptance Criteria ({APP_ORDNER}/ai_docs/requirements/acceptance-criteria.md)

## Deliverables nach Requirements Analysis

### 1. AI Docs Struktur erstellen
```bash
{APP_ORDNER}/
├── ai_docs/
│   ├── requirements/
│   │   ├── user-stories.md
│   │   ├── features.md
│   │   ├── business-logic.md
│   │   └── acceptance-criteria.md
│   ├── system-design/         # (für nächste Phase)
│   ├── development-plan/      # (für nächste Phase)
│   ├── implementation/        # (für nächste Phase)
│   └── deployment/           # (für nächste Phase)
└── .cursorrules              # App-spezifische Rules
```

### 2. App-spezifische Cursor Rules ({APP_ORDNER}/.cursorrules)
```markdown
# {App Name} - Projektspezifische Cursor Rules

## Projekt Kontext
- **App Name**: {App Name}
- **Purpose**: {Kurze Beschreibung}
- **Status**: Requirements Phase Complete
- **Next Phase**: System Architecture

## Requirements Summary
- **Total User Stories**: {Anzahl}
- **MVP Features**: {Anzahl}
- **Key Epics**: {Liste der wichtigsten Epics}
- **Primary User**: {Hauptbenutzer}

## Projekt Standards
- **Documentation Location**: `ai_docs/` Ordner
- **Requirements**: Alle Requirements sind in `ai_docs/requirements/` dokumentiert
- **Naming Convention**: Feature IDs (F-001), User Story IDs (US-001)
- **Priority System**: Must-Have, Should-Have, Could-Have, Won't-Have

## Development Context
- **Target Platform**: Umbrel App
- **Integration Required**: 
  - bitsperity-mongodb (192.168.178.57:27017)
  - mosquitto MQTT broker (192.168.178.57:1883)
  - bitsperity-beacon service registration

## Quality Gates
- [ ] All user stories have acceptance criteria
- [ ] Features are MoSCoW prioritized  
- [ ] Business logic documented
- [ ] MVP scope clearly defined
- [ ] Umbrel integration requirements identified

## Next Steps
1. Run System Architect rules to create technical design
2. Use `ai_docs/requirements/` as input
3. Create system design in `ai_docs/system-design/`
```

## Validierung & Quality Gates

### Requirements Completeness Check
- [ ] Alle User Stories haben Acceptance Criteria
- [ ] Features sind nach MoSCoW priorisiert
- [ ] Business Logic ist klar dokumentiert
- [ ] Edge Cases sind berücksichtigt
- [ ] Performance Ziele sind definiert
- [ ] **ai_docs Struktur ist erstellt**
- [ ] **App-spezifische .cursorrules sind erstellt**

### Stakeholder Approval
- [ ] Product Owner hat User Stories approved
- [ ] Benutzer haben Features validiert
- [ ] Business Logic ist mit Fachbereich abgestimmt
- [ ] Acceptance Criteria sind testbar formuliert

## Communication mit anderen Rollen

### → System Architect
- **Übergebe**: User Stories, Features, Business Logic, Acceptance Criteria (alle in `ai_docs/requirements/`)
- **Erwarte**: Technische Machbarkeitsbestätigung und Aufwandsschätzung

### → Phase Planner  
- **Übergebe**: Priorisierte Features mit Abhängigkeiten
- **Erwarte**: Realistische Entwicklungsphasen basierend auf Feature-Komplexität

### → Implementation Guide
- **Übergebe**: Detaillierte Acceptance Criteria für aktuelle Phase
- **Erwarte**: Implementierung die alle Requirements erfüllt

Nutze diese Rules um vollständige, tech-agnostische Requirements zu erstellen, die als solide Basis für die technische Planung dienen. 