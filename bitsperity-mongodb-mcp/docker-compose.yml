services:
  # MongoDB MCP Server (STDIO mode)
  mcp-server:
    build: .
    restart: unless-stopped
    stop_grace_period: 30s
    stdin_open: true  # Enable STDIN for MCP communication
    tty: true         # Enable TTY for MCP communication
    network_mode: host  # Use host network to access MongoDB on localhost:27017
    volumes:
      - ${APP_DATA_DIR:-./data}/data:/app/data
      - ${APP_DATA_DIR:-./data}/logs:/app/logs
    environment:
      # MCP Configuration
      SESSION_TTL: ${SESSION_TTL:-3600}  # 1 hour
      MAX_CONNECTIONS: ${MAX_CONNECTIONS:-10}
      CONNECTION_TIMEOUT: ${CONNECTION_TIMEOUT:-300}  # 5 minutes
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
      # Data Directory
      DATA_DIR: /app/data
      
      # Web API URL for logging
      WEB_API_URL: http://localhost:8080
      
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "ps", "aux"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Optional: Web Interface for monitoring (separate service)
  web:
    build: .
    restart: unless-stopped
    stop_grace_period: 1m
    ports:
      - "8080:8080"  # Web Interface
    environment:
      # App Configuration
      APP_ENV: ${APP_ENV:-development}
      WEB_HOST: 0.0.0.0
      WEB_PORT: 8080
      
    command: ["python", "src/simple_web_api.py"]  # Use the new Python API
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.3'
        reservations:
          memory: 64M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    profiles:
      - web  # Only start if explicitly requested 