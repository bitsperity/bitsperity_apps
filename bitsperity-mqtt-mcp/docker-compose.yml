version: "3.8"

services:
  # App Proxy für Umbrel Web Interface
  app_proxy:
    environment:
      # Frontend container name + port
      APP_HOST: bitsperity-mqtt-mcp-frontend
      APP_PORT: 8091

  # MCP Server Service (Backend)
  server:
    image: bitsperity/mqtt-mcp:latest
    container_name: bitsperity-mqtt-mcp
    restart: on-failure
    stop_grace_period: 1m
    
    # Use umbrel main network for MongoDB access
    networks:
      - default
      - umbrel_main_network
    
    # STDIO für MCP communication
    stdin_open: true
    tty: true
    
    environment:
      # Production environment
      - NODE_ENV=production
      - LOG_LEVEL=info
      - MCP_SERVER_PORT=stdio
      
    volumes:
      # Persistent storage für logs and session data
      - ${APP_DATA_DIR}/logs:/app/logs
      - ${APP_DATA_DIR}/data:/app/data
      
    # Simplified health check - nur check ob script existiert
    healthcheck:
      test: ["CMD", "python3", "-c", "import os; exit(0 if os.path.exists('/app/src/simple_mcp_server.py') else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
      
    # Resource limits für production
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.1'

  # Web Frontend Service
  web:
    image: bitsperity/mqtt-mcp-frontend:latest
    container_name: bitsperity-mqtt-mcp-frontend
    restart: on-failure
    stop_grace_period: 30s
    
    # Use umbrel main network for MongoDB access
    networks:
      - default
      - umbrel_main_network
    
    # NO port exposure - handled by app_proxy
    
    environment:
      - NODE_ENV=production
      - PORT=8091
      - MONGODB_URL=mongodb://192.168.178.57:27017/bitsperity_mqtt_mcp
      
    volumes:
      # Persistent storage für frontend logs
      - ${APP_DATA_DIR}/frontend-logs:/app/logs
      
    # Frontend health check
    healthcheck:
      test: ["CMD", "node", "-e", "const http = require('http'); const options = { hostname: 'localhost', port: 8091, path: '/health', timeout: 5000 }; const req = http.request(options, (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }); req.on('error', () => process.exit(1)); req.on('timeout', () => process.exit(1)); req.end();"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
      
    # Resource limits für frontend
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.3'
        reservations:
          memory: 32M
          cpus: '0.1'
          
    # Depend on MCP server
    depends_on:
      server:
        condition: service_healthy

# External networks for MongoDB access
networks:
  umbrel_main_network:
    external: true 