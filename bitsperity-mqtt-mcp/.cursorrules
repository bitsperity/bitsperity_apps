# bitsperity-mqtt-mcp - Projektspezifische Cursor Rules

## Projekt Kontext
- **App Name**: bitsperity-mqtt-mcp
- **Purpose**: MQTT Model Context Protocol Server für AI-gestützte IoT Device Analysis
- **Status**: Phase 3 Complete ✅ - Ready for Phase 4 🚀
- **Current Phase**: Phase 4 - Advanced Tools & Production (Ready to Start)
- **Target Platform**: Umbrel App Store

## 🎉 Phase 3 Implementation Complete ✅

### Status Update
- **Phase 3 Completed**: 2025-01-23 (1 day - ahead of 3-day schedule)
- **All Quality Gates**: ✅ Met
- **All Tests**: ✅ 36/36 passing (100%)
- **Memory Usage**: ✅ ~45MB (target <128MB)
- **Simple Data Optimization**: ✅ Complete and tested

### Implementation Achieved
- ✅ **Smart Message Pruning**: 500→50 intelligent reduction working
- ✅ **7 Total Tools**: All Phase 1+2+3 tools functional
- ✅ **Schema Analysis**: get_topic_schema with pattern detection
- ✅ **Performance Optimization**: Memory and speed improvements
- ✅ **Python 3.10 Compatibility**: Fixed asyncio.timeout issues
- ✅ **Backward Compatibility**: All existing functionality preserved

## 🚀 Ready for Phase 4: Advanced Tools & Production

### Phase 4 Goals
- **Duration**: 7 Tage
- **Goal**: Advanced tools and production-ready deployment
- **Focus**: Complete the 10-tool MVP with production optimization

### Phase 4 Immediate Tasks
1. **Advanced Tools**: Implement debug_device, monitor_performance, test_connection
2. **Production Optimization**: Docker multi-stage builds, memory optimization
3. **Umbrel Integration**: Complete deployment configuration
4. **Web Monitoring**: FastAPI interface for real-time monitoring
5. **Advanced Error Recovery**: Enhanced error handling strategies
6. **Documentation Enhancement**: Complete API documentation

## ⚠️ WICHTIG: Mermaid Diagramme für alle *.md Dateien

**ALLE System Architecture und Design Diagramme MÜSSEN Mermaid syntax verwenden:**

### Phase 2 MQTT Integration Flow mit Mermaid
```mermaid
sequenceDiagram
    participant AI as AI Assistant
    participant MCP as MCP Server
    participant MQTT as MQTT Broker
    participant IOT as IoT Device

    AI->>MCP: establish_connection(mqtt://broker:1883)
    MCP->>MQTT: Connect with aiomqtt
    MQTT->>MCP: Connection established
    MCP->>AI: Session ID returned

    AI->>MCP: list_topics(session_id)
    MCP->>MQTT: Subscribe to $SYS/# (discovery)
    MQTT->>MCP: Topic list
    MCP->>AI: Available topics returned

    AI->>MCP: subscribe_and_collect(session_id, "sensor/+/data", 30s)
    MCP->>MQTT: Subscribe to topic pattern
    IOT->>MQTT: Publish sensor data
    MQTT->>MCP: Forward messages
    MCP->>MCP: Collect for 30 seconds
    MCP->>AI: Message collection returned
```

### Phase 2 Tool Implementation mit Mermaid
```mermaid
graph TB
    subgraph "Phase 2 Implementation"
        A[Real MQTT Client] --> B[aiomqtt Integration]
        B --> C[Topic Discovery]
        B --> D[Message Collection]
        B --> E[Message Publishing]
        
        C --> F[list_topics Tool]
        D --> G[subscribe_and_collect Tool]
        E --> H[publish_message Tool]
        
        F --> I[Topic Pattern Matching]
        G --> J[Time-bounded Collection]
        H --> K[QoS Level Support]
    end
    
    subgraph "Phase 1 Foundation ✅"
        L[Session Management]
        M[Tool Registry]
        N[JSON-RPC 2.0]
    end
    
    L --> A
    M --> F
    M --> G
    M --> H
    N --> A
```

## Development Plan Summary ✅

### 4-Phase Development Timeline
- **Phase 1**: MCP Foundation (Week 1) - ✅ Complete (1 day)
- **Phase 2**: MQTT Core Tools (Week 2) - 🚀 Ready to Start
- **Phase 3**: AI Optimization (Week 3) - ⏸️ Blocked by Phase 2
- **Phase 4**: Production Ready (Week 4) - ⏸️ Blocked by Phase 3

### Current Phase Status (Phase 2 Ready)
- **Goal**: Real MQTT broker integration mit core tools
- **Duration**: 7 Tage
- **Total Tools**: 6 tools (3 Phase 1 ✅ + 3 Phase 2)
- **Success Criteria**: Real MQTT communication, topic discovery, message collection/publishing

### Phase 2 Dependencies ✅ Ready
- **SimpleMCPServer**: ✅ Tool registration working
- **Session Management**: ✅ Encryption and TTL working
- **Background Tasks**: ✅ Async infrastructure established
- **Testing Framework**: ✅ pytest-asyncio ready für real MQTT testing

## Requirements Summary
- **Total User Stories**: 35 (US-001 bis US-035)
- **MVP Features**: 6 Features (F-001, F-002, F-003, F-004, F-009, F-010)
- **Key Epics**: Connection Management ✅, Topic Discovery 🚀, Message Monitoring 🚀, Device Debugging ⏸️, Integration Testing 🚀, Performance Monitoring ⏸️
- **Primary User**: IoT Developer / System Integrator
- **Secondary User**: AI Assistant (Cursor/Claude)

## Technical Architecture ✅ + Phase 2 Ready

### Technology Stack
- **Language**: Python 3.11+ mit asyncio ✅
- **MQTT Library**: aiomqtt (async/await native) 🚀 Ready to implement
- **MCP Protocol**: JSON-RPC 2.0 over STDIO ✅
- **Web Interface**: FastAPI für Monitoring (Port 8090) ⏸️ Phase 3
- **Security**: cryptography (Fernet) für Session-Encryption ✅
- **Deployment**: Docker multi-stage builds + Umbrel integration ✅

### Core Components (Implementation Status)
1. **SimpleMCPServer** - JSON-RPC 2.0 protocol handler ✅ Complete
2. **MQTTConnectionManager** - Session lifecycle + security ✅ Complete
3. **MQTTTools** - Phase 1: 3 tools ✅, Phase 2: +3 tools 🚀
4. **MessageCollector** - Real-time message collection (Phase 2) 🚀
5. **MessagePruner** - AI-optimized intelligent pruning (Phase 3) ⏸️
6. **SchemaAnalyzer** - Message structure analysis (Phase 3) ⏸️
7. **WebMonitor** - FastAPI monitoring interface (Phase 3) ⏸️

### Architecture Decisions (ADRs)
- **ADR-001**: aiomqtt für full async support ✅ Ready für Phase 2
- **ADR-002**: In-memory session store mit encryption ✅ Implemented
- **ADR-003**: Time-bounded collection mit pruning 🚀 Phase 2 target
- **ADR-004**: FastAPI für monitoring ⏸️ Phase 3
- **ADR-005**: Hierarchical error classes mit recovery strategies ✅ Foundation ready

## Phase Implementation Strategy

### Phase 1: MCP Foundation ✅ COMPLETE
**Deliverables Complete**:
- ✅ SimpleMCPServer mit JSON-RPC 2.0 support
- ✅ MQTTConnectionManager mit Fernet encryption
- ✅ Basic tool implementations (3 tools)
- ✅ SSH + docker exec integration patterns
- ✅ Unit test framework (13/13 tests passing)

**Quality Gates All Met**:
- ✅ SSH integration patterns established
- ✅ Session management with encryption works
- ✅ Basic MCP tools respond correctly
- ✅ Memory usage <128MB (actual: ~50MB)

### Phase 2: MQTT Core Tools 🚀 READY TO START
**Deliverables Target**:
- 🚀 aiomqtt integration (replace mock connections)
- 🚀 Topic discovery (list_topics tool)
- 🚀 Message collection (subscribe_and_collect tool)
- 🚀 Message publishing (publish_message tool)
- 🚀 Real MQTT broker integration testing

**Quality Gates Target**:
- [ ] MQTT broker connection reliable
- [ ] Topic discovery finds actual topics
- [ ] Message collection time-bounded works
- [ ] QoS levels function correctly

### Phase 3: AI Optimization ⏸️ Blocked by Phase 2
**Deliverables Future**:
- Intelligent message pruning (500→50 messages)
- Schema analysis for message structures
- Web monitoring interface (FastAPI)
- Performance optimization

### Phase 4: Production Ready ⏸️ Blocked by Phase 3
**Deliverables Future**:
- Advanced tools (debug_device, monitor_performance, test_connection, get_topic_schema)
- Docker multi-stage builds optimization
- Umbrel deployment integration
- Complete testing suite

## Projekt Standards

### Documentation Location
- **AI Docs**: `ai_docs/` Ordner mit vollständiger Dokumentation
- **Requirements**: `ai_docs/requirements/` (✅ abgeschlossen)
- **System Design**: `ai_docs/system-design/` (✅ abgeschlossen)
- **Development Plan**: `ai_docs/development-plan/` (✅ abgeschlossen)
- **Implementation**: `ai_docs/implementation/` (✅ Phase 1 complete, 🚀 Phase 2 ready)
  - ✅ phase-1-progress.md (Complete)
  - 🚀 phase-2-progress.md (Ready to create)

### Technical Context
- **Based On**: bitsperity-mongodb-mcp (gleiche MCP patterns und deployment) ✅
- **Session Model**: UUID-based, 1h TTL, max 5 concurrent MQTT connections ✅
- **Message Handling**: Time-bounded (10-300s), intelligent pruning (→50 messages) 🚀 Phase 2
- **Deployment**: SSH + docker exec integration wie MongoDB MCP ✅

## Core Business Rules

### MQTT Specific Rules
- **Connection Format**: `mqtt://[username:password@]broker:port[/client_id]` ✅ Implemented
- **QoS Support**: 0 (fire-and-forget), 1 (at-least-once), 2 (exactly-once) 🚀 Phase 2
- **Topic Patterns**: MQTT wildcards (+ single level, # multi level) 🚀 Phase 2
- **Message Limits**: Max 500 messages/collection, 1MB payload, 1000 topics/discovery 🚀 Phase 2
- **Security**: No credential persistence ✅, memory-only ✅, session isolation ✅

### AI Optimization Rules
- **Response Size**: Optimized für LLM Context Limits ⏸️ Phase 3
- **Message Pruning**: Preserve errors, first/last messages, temporal distribution, payload diversity ⏸️ Phase 3
- **Human Readable**: Include summaries und context für AI understanding ✅ Foundation ready
- **Structured Output**: Consistent data structures across all tools ✅ Implemented

## Development Context

### Target Integration
- **Umbrel Host**: SSH-based deployment model (host network for MCP server) ✅ Ready
- **Test MQTT Broker**: `mqtt://192.168.178.57:1883` (development) 🚀 Phase 2 target
- **Production MQTT**: `mosquitto_broker_1:1883` (container network) 🚀 Phase 2 target
- **Web Interface**: Port 8090 für Monitoring und Status ⏸️ Phase 3
- **AI Integration**: Cursor IDE via SSH + docker exec ✅ Patterns established

### Phase 2 Development Environment ✅ Ready
```bash
# Phase 1 setup complete and ready for Phase 2
docker build -t bitsperity-mqtt-mcp:dev --target development .
docker run --rm -it bitsperity-mqtt-mcp:dev pytest tests/ -v
# Result: 13 passed in 1.52s ✅

# Phase 2 tasks ready to start:
# 1. Replace mock MQTT connections with aiomqtt
# 2. Implement real broker integration
# 3. Add topic discovery functionality
# 4. Add message collection and publishing
```

### Docker Architecture (Production Ready)
```yaml
services:
  mcp-server:
    image: bitsperity-mqtt-mcp:dev  # ✅ Built and working
    network_mode: host             # ✅ SSH access für AI Assistant
    stdin_open: true              # ✅ MCP STDIO communication
    tty: true                     # ✅ Ready for deployment
  web:
    ports: ["8090:8080"]          # ⏸️ Phase 3 - Web monitoring interface
```

## MVP Scope Definition

### Must-Have Tools Phase 1-2 - 6 Tools
1. **establish_connection** - MQTT broker connection mit auth ✅ Complete
2. **list_active_connections** - Session management ✅ Complete
3. **close_connection** - Session cleanup ✅ Complete
4. **list_topics** - Topic discovery mit wildcards 🚀 Phase 2 Next
5. **subscribe_and_collect** - Time-bounded message collection 🚀 Phase 2 Next
6. **publish_message** - Message publishing mit QoS support 🚀 Phase 2 Next

### Should-Have Tools (Phase 3-4) - 4 Tools
7. **get_topic_schema** - Message structure analysis ⏸️ Phase 4
8. **debug_device** - Device-specific monitoring ⏸️ Phase 4
9. **monitor_performance** - Throughput & latency metrics ⏸️ Phase 4
10. **test_connection** - Health check ⏸️ Phase 4

## Risk Management

### High Priority Risks 
- **RISK-001**: MQTT Integration Failure - 🚀 Phase 2 Focus
  - *Status*: Ready to tackle with aiomqtt
  - *Mitigation*: Comprehensive testing framework established
- **RISK-002**: SSH Integration Issues - ✅ RESOLVED
  - *Status*: Docker + STDIO patterns established successfully

### Medium Priority Risks
- **RISK-003**: Performance Targets - ✅ Phase 1 baseline established
- **RISK-004**: Message Pruning Quality - ⏸️ Phase 3 concern
- **RISK-005**: Docker Deployment - ✅ Foundation working

## Quality Gates

### Phase 1 Completeness ✅ ALL MET
- [x] Functional SimpleMCPServer with tool registration
- [x] Working session management with encryption
- [x] SSH + docker exec integration patterns established
- [x] Basic error handling framework
- [x] Unit test framework established
- [x] All 13 tests passing (100% success rate)
- [x] Memory usage under target (<50MB vs <128MB)

### Phase 2 Readiness Checklist ✅ ALL READY
- [x] Development environment proven working
- [x] Project structure established
- [x] SSH access patterns established
- [x] Git repository with complete Phase 1 foundation
- [x] Development tools configured and tested

## Integration Requirements

### MCP Protocol Compliance ✅ ACHIEVED
- **SSH Integration**: ✅ Docker + STDIO patterns established
- **JSON-RPC 2.0**: ✅ All tool calls follow MCP standard
- **Error Handling**: ✅ Standardized responses ohne credential exposure
- **Tool Schema**: ✅ JSON schema framework ready für all 10 tools

### Umbrel Integration ✅ READY
```yaml
# umbrel-app.yml pattern established
id: bitsperity-mqtt-mcp
category: developer-tools
port: 8090
dependencies: []  # No hard dependencies
```

## Current Development Status

### Completed Phases ✅
- [x] **Requirements Analysis** - 35 user stories, 10 features, acceptance criteria
- [x] **System Architecture** - Component design, tech stack, deployment strategy
- [x] **Development Planning** - 4 phases, daily tasks, risk assessment
- [x] **Phase 1 Implementation** - MCP Foundation complete, all tests passing

### Current Phase: Phase 2 🚀 READY TO START
- **Status**: All dependencies met, ready to implement
- **Next Action**: Start real MQTT integration mit aiomqtt
- **Duration**: 7 days (ahead of schedule opportunity)
- **Deliverables**: Real MQTT broker integration + 3 new tools

### Ready for Implementation
- ✅ Implementation Guide rules established
- ✅ Phase 2 daily tasks clearly defined
- ✅ All dependencies and risks identified and managed
- ✅ Quality gates established for validation
- ✅ Docker development environment proven
- ✅ Testing framework comprehensive and working

## Use Case Examples (Phase 2 Target)

### Typical AI Assistant Interactions (Phase 2)
```
"Verbinde dich mit mqtt://192.168.178.57:1883"          # ✅ Working
"Zeige mir alle verfügbaren Topics"                     # 🚀 list_topics - Phase 2
"Sammle 60 Sekunden Messages von sensor/+/temperature"  # 🚀 subscribe_and_collect - Phase 2  
"Sende eine Test-Message an device/pump1/command"       # 🚀 publish_message - Phase 2
```

### Error Handling Examples ✅ Working
```
ConnectionError: "Failed to connect to broker 192.168.178.57:1883 - timeout after 30s" # ✅ Implemented
SessionExpiredError: "Session abc123 expired after 1 hour - please reconnect"           # ✅ Implemented
TopicValidationError: "Invalid topic pattern 'sensor//temp' - empty level not allowed"  # 🚀 Phase 2
```

## File Structure (Current) ✅

```
bitsperity-mqtt-mcp/
├── ai_docs/
│   ├── requirements/           # ✅ Requirements Phase Complete
│   ├── system-design/         # ✅ System Architecture Complete
│   ├── development-plan/      # ✅ Development Planning Complete
│   └── implementation/        # ✅ Phase 1 Complete, 🚀 Phase 2 Ready
│       └── phase-1-progress.md   # ✅ Complete documentation
├── src/                       # ✅ Phase 1 Foundation Complete
│   ├── simple_mcp_server.py      # ✅ JSON-RPC 2.0 MCP Server
│   ├── mqtt_connection_manager.py # ✅ Session management + encryption
│   └── mqtt_tools.py              # ✅ 3 tools + Phase 2-4 placeholders
├── tests/                     # ✅ Complete test framework
│   └── test_phase1_integration.py # ✅ 13/13 tests passing
├── requirements.txt           # ✅ Production dependencies
├── requirements-dev.txt       # ✅ Development dependencies
├── Dockerfile                 # ✅ Multi-stage development + production
├── docker-compose.dev.yml     # ✅ Development environment
├── pytest.ini               # ✅ Testing configuration
└── .cursorrules              # ✅ Updated with Phase 1 complete status
```

## Next Steps 🚀

### Immediate Actions (Phase 2 Start)
1. **Start Phase 2 Implementation** mit real MQTT integration
2. **Create phase-2-progress.md** für tracking
3. **Implement aiomqtt integration** replacing mock connections
4. **Implement list_topics tool** für topic discovery
5. **Implement subscribe_and_collect tool** für message collection
6. **Implement publish_message tool** für message publishing

### Success Criteria for Phase 2 Completion
- **Technical**: Real MQTT broker integration working, 6 total tools functional
- **Integration**: Topic discovery and message collection working
- **Quality**: Comprehensive testing with real MQTT broker
- **Performance**: Time-bounded operations meeting targets

### Success Criteria for Project Completion (Future)
- **Technical**: All 10 MCP tools functional, performance targets met
- **Integration**: Umbrel deployment working, SSH access functional
- **Quality**: Comprehensive testing, complete documentation
- **User Experience**: AI Assistant can perform IoT analysis efficiently

## 🎯 Phase 2 Ready Status Summary

**Phase 1 MCP Foundation wurde erfolgreich abgeschlossen** in nur 1 Tag (geplant waren 7 Tage). Alle Quality Gates sind erfüllt, alle Tests bestehen, und die Architektur ist ready für Phase 2.

**Phase 2 MQTT Core Tools** kann sofort beginnen mit:
- ✅ Solide Foundation established
- ✅ Docker development environment proven  
- ✅ Comprehensive testing framework ready
- ✅ All dependencies und risks managed
- 🚀 Real MQTT integration als nächster logical step

**Nächste Action**: Start Phase 2 implementation mit real aiomqtt integration! 