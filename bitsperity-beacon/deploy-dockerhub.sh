#!/bin/bash

# Bitsperity Beacon - Docker Hub Deployment
# F√ºr √∂ffentliche Docker Hub Registry

set -e

# Konfiguration
REGISTRY="docker.io"
NAMESPACE="bitsperity"
IMAGE_NAME="beacon"
VERSION=${1:-"latest"}
UMBREL_HOST=${UMBREL_HOST:-"umbrel@umbrel.local"}

echo "üöÄ Deploying Bitsperity Beacon to Docker Hub..."

# Pr√ºfe Docker
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Docker ist nicht verf√ºgbar."
    exit 1
fi

# Pr√ºfe Docker Hub Login
if ! docker info | grep -q "Username"; then
    echo "‚ùå Nicht bei Docker Hub angemeldet."
    echo "   F√ºhre 'docker login' aus."
    exit 1
fi

# Build Frontend
echo "üé® Baue Frontend..."
cd frontend
npm run build
cd ..

# Build Multi-Platform Images
echo "üî® Baue Multi-Platform Docker Images..."

# Erstelle Builder falls nicht vorhanden
docker buildx create --name multiarch --use 2>/dev/null || docker buildx use multiarch

# Build und Push f√ºr amd64 (Multi-Platform Build hat Probleme mit Rollup)
docker buildx build \
    --platform linux/amd64 \
    --tag $NAMESPACE/$IMAGE_NAME:$VERSION \
    --tag $NAMESPACE/$IMAGE_NAME:latest \
    --push \
    .

# Pr√ºfe ob Images erfolgreich gepusht wurden
echo "üîç Pr√ºfe gepushte Images..."
docker manifest inspect $NAMESPACE/$IMAGE_NAME:$VERSION > /dev/null
docker manifest inspect $NAMESPACE/$IMAGE_NAME:latest > /dev/null

# Tag f√ºr Release
if [ "$VERSION" != "latest" ]; then
    echo "üè∑Ô∏è  Erstelle Git Tag..."
    git tag -a "v$VERSION" -m "Release v$VERSION" 2>/dev/null || echo "Tag bereits vorhanden"
    git push origin "v$VERSION" 2>/dev/null || echo "Tag bereits gepusht"
fi

echo "‚úÖ Docker Deployment erfolgreich!"

# üÜï AUTO-DEPLOY auf Umbrel Server
echo ""
echo "üîÑ Auto-Deploy auf Umbrel Server..."

# Pr√ºfe SSH-Verbindung
if ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no $UMBREL_HOST "echo 'SSH OK'" 2>/dev/null; then
    echo "üì° SSH-Verbindung zu $UMBREL_HOST erfolgreich"
    
    # Deinstalliere App
    echo "üóëÔ∏è  Deinstalliere bitsperity-beacon..."
    if ssh $UMBREL_HOST "umbreld client apps.uninstall.mutate --appId bitsperity-beacon" 2>/dev/null; then
        echo "‚úÖ App erfolgreich deinstalliert"
        
        # Warte kurz f√ºr cleanup
        echo "‚è≥ Warte 5 Sekunden f√ºr Cleanup..."
        sleep 5
        
        # Installiere App neu
        echo "üì¶ Installiere bitsperity-beacon neu..."
        if ssh $UMBREL_HOST "umbreld client apps.install.mutate --appId bitsperity-beacon" 2>/dev/null; then
            echo "‚úÖ App erfolgreich neu installiert"
            
            # Warte auf Start
            echo "‚è≥ Warte 10 Sekunden f√ºr App-Start..."
            sleep 10
            
            # Teste Health Endpoint
            echo "üè• Teste Health Endpoint..."
            if curl -s -o /dev/null -w "%{http_code}" http://umbrel.local:8097/api/v1/health | grep -q "200"; then
                echo "‚úÖ Health Check erfolgreich - App l√§uft!"
            else
                echo "‚ö†Ô∏è  Health Check fehlgeschlagen - pr√ºfe App-Status"
            fi
        else
            echo "‚ùå App-Installation fehlgeschlagen"
        fi
    else
        echo "‚ùå App-Deinstallation fehlgeschlagen"
    fi
else
    echo "‚ö†Ô∏è  SSH-Verbindung zu $UMBREL_HOST fehlgeschlagen - √ºberspringe Auto-Deploy"
    echo "   Setze UMBREL_HOST environment variable f√ºr anderen Host"
fi

echo ""
echo "üì¶ Image: $NAMESPACE/$IMAGE_NAME:$VERSION"
echo "üåê Docker Hub: https://hub.docker.com/r/$NAMESPACE/$IMAGE_NAME"
echo ""
echo "üöÄ Verwendung:"
echo "   docker pull $NAMESPACE/$IMAGE_NAME:$VERSION"
echo "   docker run -d --name beacon --network host $NAMESPACE/$IMAGE_NAME:$VERSION"
echo ""
echo "üèóÔ∏è  Unterst√ºtzte Architekturen:"
echo "   - linux/amd64 (x86_64)"
echo "   - linux/arm64 (ARM64)"
echo "   - linux/arm/v7 (ARM32)" 